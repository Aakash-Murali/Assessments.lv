# -*- coding: utf-8 -*-
"""lvadsusr136_aakashmurali_Classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W9o8Zuecsnwt5rbpqvlN3Zu_BQ6GTC-A
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import time
from sklearn.metrics import accuracy_score, classification_report, precision_recall_fscore_support
from sklearn.metrics import precision_recall_curve,confusion_matrix, ConfusionMatrixDisplay
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score,mean_squared_error,mean_absolute_error
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.cluster import KMeans
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
import collections
from sklearn.model_selection import train_test_split
from imblearn.over_sampling import SMOTE
from imblearn.metrics import classification_report_imbalanced
from sklearn.metrics import precision_score, recall_score, f1_score, roc_auc_score, accuracy_score, classification_report,silhouette_score
from sklearn.model_selection import KFold, StratifiedKFold
import random
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler , LabelEncoder
from sklearn.metrics import accuracy_score, classification_report, precision_recall_fscore_support, precision_recall_curve
import warnings
warnings.filterwarnings("ignore")

df=pd.read_csv('https://raw.githubusercontent.com/Deepsphere-AI/LVA-Batch5-Assessment/main/winequality-red.csv')
df.head()

df.info()

df.shape

df.isnull().sum()

df.dropna(inplace=True)
df.isnull().sum()

df.duplicated().sum()
df[df.duplicated()]

for col in df.select_dtypes(include=['int','float']).columns:
  plt.figure(figsize=(5,5))
  sns.boxplot(x=df[col])
  plt.show()

x=df.drop('quality',axis=1)
y=df['quality']

xtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=0.3)
model=RandomForestClassifier()
model.fit(xtrain,ytrain)
pred=model.predict(xtest)

print('accuracy : '   , accuracy_score(ytest,pred))
print('precision : '  , precision_score(ytest,y_pred=pred,average=None))
print('recall : '     , recall_score(ytest,pred,average=None))